swagger: '2.0'
info:
  title: Geotracking API
  description: API mission consultants SQLI
  version: "1.0.0"

host: localhost:8080
schemes:
  - http
produces:
  - application/json
consumes:
  - application/json
tags:
- name: "companies"
  description: "Every company"
- name: "company"
  description: "Specific company"
- name: "person"
  description: "Specific person"
- name: "people"
  description: "List of people"


paths: # obligatoire
  /companies:
    get:
      tags:
        - "companies"
      summary: Get every company
      description: Get the collection named companies
      responses:
        200:
          description: Companies
          schema:
            type: object
            properties:
              result:
                type: array
                items:
                  type: object
                  properties:
                    company:
                      $ref: '#/definitions/company'

  /company/{name}:
    get:
      tags:
        - "company"
      summary: Get a specific company
      description: Get a company by name
      parameters:
        - name: "name"
          in : "path"
          description: "Name of a company"
          required: true
          type: "string"
      responses:
        200:
          description: Company
          schema:
            type: object
            properties:
              result:
                type: object
                properties:
                  company:
                    $ref: '#/definitions/company'

        404:
          description: Company not found
          schema:
            type: object
            properties:
              result:
                  type: "string"
                  example: "Company not found"

  /people/name/{name}:
      get:
        tags:
        - "people"
        summary: Get people by name
        description: Get people by name
        parameters:
          - name: "name"
            in : "path"
            description: "Name of a person"
            required: true
            type: "string"
        responses:
          200:
            description: people
            schema:
              $ref: '#/definitions/resultPeople'

          404:
            description: Person not found
            schema:
              type: object
              properties:
                result:
                    type: "string"
                    example: "Person not found"



  /person/id/{id}:
      get:
        tags:
        - "person"
        summary: Get a specific person
        description: Get a person by id
        parameters:
          - name: "id"
            in : "path"
            description: "Id of a person"
            required: true
            type: "string"
        responses:
          200:
            description: person
            schema:
              type: object
              properties:
                result:
                  type: array
                  items:
                    $ref: '#/definitions/person'
          404:
            description: Person not found
            schema:
              type: object
              properties:
                result:
                    type: "string"
                    example: "Person not found"

      put:
        tags:
        - "person"
        summary: Update a person
        description: Update the name of a specific person
        parameters:
          - name: "id"
            in : "path"
            description: "Name of a person"
            required: true
            type: "string"
          - in: body
            name: data
            required: true
            schema:
              type: object
              properties:
                name:
                  type: string
                forename:
                  type: string

        responses:
          200:
            description: person
            schema:
              type: object
              properties:
                result:
                  type: array
                  items:
                    $ref: '#/definitions/person'
          404:
            description: Person not found
            schema:
              type: object
              properties:
                result:
                    type: "string"
                    example: "Person not found"

  /people:
      get:
        tags:
        - "people"
        summary: Get people
        description: Get every person
        responses:
          200:
            description: people
            schema:
              $ref: '#/definitions/resultPeople'

definitions:
  person:
    properties:
      _id:
        type: integer
      name:
        type: string
      forename:
        type: string
      company:
        type: object
        properties:
          name:
            type: string
          address:
            type: string
  company:
    properties:
      name:
        type: string
      address:
        type: string

  resultPeople:
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/person'

